4.	Binaarne otsingualgoritm

Pythoni keeles

def binary_search(arr, target):
    left, right = 0, len(arr) - 1

    while left <= right:
        mid = (left + right) // 2  # Leidame keskme indeksi

        if arr[mid] == target:
            return mid  # Täisarv leiti, tagastame indeksi
        elif arr[mid] < target:
            left = mid + 1  # Kui otsitav väärtus on suurem, liigume paremale poolele
        else:
            right = mid - 1  # Kui otsitav väärtus on väiksem, liigume vasakule poolele

    return "Täisarvu ei leitud"

Kasutamine:

sorted_list = [1, 3, 5, 7, 9, 11, 13, 15]
target = 7
result = binary_search(sorted_list, target)
if type(result) == int:
    print(f"Täisarv {target} leiti indeksilt {result}")
else:
    print(result)

Alustame vasakust ja paremast indeksist ning arvutame keskme indeksi.
Iga sammuga võrdleme keskmist elementi otsitava väärtusega.
Kui keskmine element on otsitav väärtus, tagastame selle indeksi.
Kui keskmine element on väiksem kui otsitav väärtus, siis liigume parema poole suunas (muudame vasakut indeksit mid + 1-ks).
Kui keskmine element on suurem kui otsitav väärtus, siis liigume vasakule (muudame paremat indeksit mid - 1-ks).
Kui vasak indeks läheb paremast indeksist mööda, siis ei leitud otsitavat väärtust ning tagastame sõnumi, et väärtust pole leitud.
Selle binaarse otsingu algoritmi ajaline keerukus on O(log n), kus n on sorteeritud loendi pikkus. See on efektiivne viis leida elemente suurtest sorteeritud loenditest, kuna see vähendab otsingute arvu poole võrra igal sammul.
