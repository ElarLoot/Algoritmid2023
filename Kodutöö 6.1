Laius-Esmalt Otsing (Breadth-First Search, BFS) Implementatsioon

Pythoni keeles implementatsioon

from collections import deque

class Graaf:
    def __init__(self):
        self.graaf = {}

    def lisa_tipp(self, tipp, naabrid):
        self.graaf[tipp] = naabrid

def bfs(graaf, algne_tipp):
    külastatud = set()
    järjekord = deque([algne_tipp])

    while järjekord:
        hetke_tipp = järjekord.popleft()
        if hetke_tipp not in külastatud:
            print(hetke_tipp)
            külastatud.add(hetke_tipp)
            järjekord.extend(graaf[hetke_tipp])

# Näidisgraafi loomine
minu_graaf = Graaf()
minu_graaf.lisa_tipp(1, [2, 3])
minu_graaf.lisa_tipp(2, [4, 5])
minu_graaf.lisa_tipp(3, [6])
minu_graaf.lisa_tipp(4, [])
minu_graaf.lisa_tipp(5, [6])
minu_graaf.lisa_tipp(6, [])

# Alustame BFS-i esimesest tipust
algne_tipp = 1
bfs(minu_graaf.graaf, algne_tipp)


Selgitused

1. `bfs` funktsioon
    - See funktsioon teostab laius-esmalt otsingu (BFS) algoritmi.
    - Kasutab järjekorda (deque), et hoida tippe, mida tuleb veel külastada. Alguses sisaldab see ainult algset tippu.
    - Kuni järjekord ei ole tühi, võetakse sellest esimene element, külastatakse seda, ja lisatakse järjekorda selle naabertipud (kui need pole veel külastatud).
    - See jätkub seni, kuni kõik tipud on külastatud.

2. Näidisgraafi loomine ja BFS-i käivitamine
    - Näidisgraaf `minu_graaf`, kus iga tipp on seotud teatud naabritega.
    - Alustatakse BFS-i esimesest tipust (`algne_tipp = 1`) selleks, et külastada graafi laius-esmalt.



