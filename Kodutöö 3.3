Jump Search


Jump Search on otsingualgoritm, mis töötab järjestatud massiivides. See ühendab endas lineaarse otsingu lihtsust ja binaarotsingu efektiivsust. Algoritm eeldab, 
et massiiv on järjestatud ning töötab sammude kaupa, hüpates kindla arvu elementide vahele.

Põhiprintsiibid:

Määratakse hüppamise pikkus (jump length) nii, et 
jump_length
=
array_length
jump_length= 
array_length
​
 .
Algoritm hüppab ettepoole massiivis nii kaua, kuni leitakse vahemik, kus otsitav element võib olla.
Järgneb lineaarne otsing selle vahemiku sees.

Pseudo-kood:

function jumpSearch(arr, x):
    n = length of arr
    step = sqrt(n)
    prev = 0
    
    while arr[min(step, n) - 1] < x:
        prev = step
        step += sqrt(n)
        if prev >= n:
            return -1
    
    while arr[prev] < x:
        prev += 1
        if prev == min(step, n):
            return -1
    
    if arr[prev] == x:
        return prev
    
    return -1


Ajastuline komplekssus võrreldes Linear Searchi ja Binary Searchiga:

Jump Search: O(log n)
Binary Search: O(log n)
Linear Search: O(n)
Stsenaariumid, kus Jump Search võib olla efektiivsem:

Suure massiivi otsimine: Kui massiiv on suur ja lineaarne otsing on liiga aeglane ning binaarne otsing nõuaks eelnevat sorteerimist, võib Jump Search olla kiire alternatiiv.

Elementidega ebavõrdselt jaotunud massiiv: Kui massiivis on elemendid ebavõrdselt jaotunud ja nende vahe on suur, võib Jump Search olla efektiivsem kui binaarne otsing.

Andmete struktuuri piirangud: Kui andmestruktuur ei võimalda otsest indeksi juurdepääsu, kuid võimaldab kiiret hüppamist, võib Jump Search olla kasulik.

Oluline on märkida, et Jump Search'i efektiivsus sõltub oluliselt andmestruktuuri ja otsitava elemendi jaotusest. On oluline mõõta ja võrrelda erinevate otsingualgoritmide tegelikku toimivust vastavalt konkreetsele kasutusstsenaariumile.

