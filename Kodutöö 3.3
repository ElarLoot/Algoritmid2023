Jump Search


Jump Search on otsingualgoritm, mis töötab järjestatud massiivides. See ühendab endas lineaarse otsingu lihtsust ja binaarotsingu efektiivsust. Algoritm eeldab, 
et massiiv on järjestatud ning töötab sammude kaupa, hüpates kindla arvu elementide vahele.

Põhiprintsiibid:

Sisendiks võtab sorteeritud massiivi ja otsitava elemendi.
Määrab hüpplaiuse (jump size), mille abil liigub massiivi edasi.
Alustab massiivi algusest ning liigub hüpplaiuse võrra edasi, kuni leitakse väärtus, mis on suurem või võrdne otsitava elemendiga.
Seejärel teeb lineaarse otsingu eelneva hüpplaiuse vahemikus, et leida täpne asukoht.

Pseudo-kood.

function jumpSearch(arr, x):
    n = length of arr
    step = sqrt(n)
    prev = 0
    
    while arr[min(step, n) - 1] < x:
        prev = step
        step += sqrt(n)
        if prev >= n:
            return -1
    
    while arr[prev] < x:
        prev += 1
        if prev == min(step, n):
            return -1
    
    if arr[prev] == x:
        return prev
    
    return -1


Ajastuline komplekssus võrreldes Linear Searchi ja Binary Searchiga.

Jump Search: O(log n) Jump Search kasutab hüpplaiust, mis on tavaliselt määratud ruutjuurena massiivi pikkusest. See pakub paremat tõhusust kui lineaarne otsing, kuid jääb binaarotsingust maha.
Binary Search: O(log n) Binaarne otsing vähendab massiivi iga sammu järel otsitavate elementide hulka poole võrra. See tagab kiirema leidmise suurte andmestike korral.
Linear Search: O(n) Lineaarne otsing peab keskmiselt kontrollima poolt massiivist, et leida otsitav element. Seega kasvab aeg lineaarselt sisendi (massiivi suuruse) suurenemisega.


Stsenaariumid, kus Jump Search võib olla efektiivsem.

Suure massiivi otsimine. Kui massiiv on suur ja lineaarne otsing on liiga aeglane ning binaarne otsing nõuaks eelnevat sorteerimist, võib Jump Search olla kiire alternatiiv.
Elementidega ebavõrdselt jaotunud massiiv. Kui massiivis on elemendid ebavõrdselt jaotunud ja nende vahe on suur, võib Jump Search olla efektiivsem kui binaarne otsing.
Andmete struktuuri piirangud. Kui andmestruktuur ei võimalda otsest indeksi juurdepääsu, kuid võimaldab kiiret hüppamist, võib Jump Search olla kasulik.
Sobib hästi olukordadesse, kus massiivi suurus on teadmata, kuna hüpplaiuse põhjal saab määrata optimaalsema otsingu strateegia.
Eeliseks võib osutuda olukord, kus andmestik on osaliselt järjestatud, sest jump search ei eelda täpset sorteeritust nagu binaarne otsing.

Jump Search'i efektiivsus sõltub oluliselt andmestruktuuri ja otsitava elemendi jaotusest. 




