import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import os

class CaesarCipher:
    def __init__(self):
        # Määrame kinddla nihutusväärtuse
        self.shift = 3

    def encrypt(self, plaintext):
        # Krüpteerimine Caesar šifri abil
        encrypted_text = ""
        for char in plaintext:
            if char.isalpha():
                shifted_char = chr((ord(char) + self.shift - ord('A' if char.isupper() else 'a')) % 26 + ord('A' if char.isupper() else 'a'))
                encrypted_text += shifted_char
            else:
                encrypted_text += char
        return encrypted_text

    def decrypt(self, ciphertext):
        # Dekrüpteerimine Caesar šifri abil
        decrypted_text = ""
        for char in ciphertext:
            if char.isalpha():
                shifted_char = chr((ord(char) - self.shift - ord('A' if char.isupper() else 'a')) % 26 + ord('A' if char.isupper() else 'a'))
                decrypted_text += shifted_char
            else:
                decrypted_text += char
        return decrypted_text

class App:
    def __init__(self, master):
        self.master = master
        self.master.title("Krüpteerimise Tööriist")
        self.master.geometry("750x500")  # Määrame akna suuruse

        self.style = ttk.Style()
        self.style.configure('TButton', padding=5, font=('Helvetica', 12))

        self.cipher = CaesarCipher()

        self.encrypt_button = ttk.Button(master, text="Vali fail krüpteerimiseks", command=self.encrypt_file)
        self.encrypt_button.pack(pady=20)

        self.decrypt_button = ttk.Button(master, text="Vali fail dekrüpteerimiseks", command=self.decrypt_file)
        self.decrypt_button.pack(pady=20)

        self.result_label = tk.Label(master, text="", wraplength=380)
        self.result_label.pack()

    def encrypt_file(self):
        # Krüpteeritud faili loomine
        file_path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
        if file_path:
            with open(file_path, 'r', encoding='utf-8') as file:
                plaintext = file.read()
                encrypted_text = self.cipher.encrypt(plaintext)
                encrypted_file_path = os.path.join(os.path.dirname(file_path), "krüpteeritud_" + os.path.basename(file_path))
                self.save_to_file(encrypted_text, encrypted_file_path)

    def decrypt_file(self):
        # Dekrüpteeritud faili loomine ja sisu kuvamine
        file_path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
        if file_path:
            with open(file_path, 'r', encoding='utf-8') as file:
                ciphertext = file.read()
                decrypted_text = self.cipher.decrypt(ciphertext)
                decrypted_file_path = os.path.join(os.path.dirname(file_path), "dekrüpteeritud_" + os.path.basename(file_path))
                self.save_and_show_decrypted_content(decrypted_text, decrypted_file_path)

    def save_to_file(self, content, file_path):
        # Salvestame teksti faili
        if not file_path.endswith(".txt"):
            file_path += ".txt"

        with open(file_path, "w", encoding='utf-8') as file:
            file.write(content)
        messagebox.showinfo("Salvestamine õnnestus", f"Tekst on salvestatud faili:\n{file_path}")

    def save_and_show_decrypted_content(self, content, file_path):
        # Salvestame dekrüpteeritud teksti faili ja kuvame sisu aknas
        if not file_path.endswith(".txt"):
            file_path += ".txt"

        with open(file_path, "w", encoding='utf-8') as file:
            file.write(content)
        self.result_label.config(text=f"Dekrüpteeritud tekst:\n{content}")
        messagebox.showinfo("Salvestamine õnnestus", f"Tekst on salvestatud ja näidatud aknas:\n{file_path}")

if __name__ == "__main__":
    root = tk.Tk()
    app = App(root)
    root.mainloop()
