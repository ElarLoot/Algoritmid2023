2.	LIFO/FIFO andmestruktuur

Pythoni programmeerimiskeeles, mis rakendab FIFO (First-In-First-Out) järjekorra andmestruktuuri. 

Kood hõlmab lihtsat järjekorda, mis võimaldab elementide lisamist (enqueue) ja eemaldamist (dequeue) järjekorrale.


class Queue:
    def __init__(self):
        self.items = []

    def is_empty(self):
        return len(self.items) == 0

    def enqueue(self, item):
        self.items.append(item)

    def dequeue(self):
        if not self.is_empty():
            return self.items.pop(0)
        else:
            return None

    def size(self):
        return len(self.items)
        
Selgitused:
__init__: Konstruktor loob tüja järjekorra, mis on sisuliselt Pythoni listi (massiivi) abil.
is_empty: See meetod kontrollib, kas järjekord on tühi või mitte, tagastades True või False.
enqueue: meetod lisab elemendi järjekorda. Uus element lisatakse järjekorra lõppu.
dequeue: meetod eemaldab ja tagastab järjekorra esimese elemendi (esimesena lisatud elemendi). Kui järjekord on tühi, tagastatakse None.
size: meetod tagastab järjekorra pikkuse, st elementide arvu järjekorras.

Ajaline keerukus:
enqueue ja dequeue meetodid kasutavad listi meetodeid append ja pop(0). append operatsioon lisab elemendi olemasoleva listi lõppu, mis on ajalise keerukusega O(1). pop(0) operatsioon eemaldab esimese elemendi, kuid seejärel tuleb kõik ülejäänud elemendid nihutada ühe positsiooni võrra, mis on ajalise keerukusega O(n), kus n on järjekorra suurus.

Seega ajaline keerukus on:
enqueue: O(1)
dequeue: O(n)

FIFO järjekord (queue) on kasulik siis, kui soovime jälgida elementide järjestust vastavalt nende saabumisele ja eemaldamisele. 
